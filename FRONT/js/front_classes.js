/**
 * Created by Daniel on 1/31/2017.
 */

var windowSize = {width: $(window).width(), height: $(window).height()};
function PercentW(perc) {
    return windowSize.width*(perc/100);
}
function PercentH(perc) {
    return windowSize.height*(perc/100);
}

;(function ($) {
    'use strict'

    /*
     * Add integers, wrapping at 2^32. This uses 16-bit operations internally
     * to work around bugs in some JS interpreters.
     */
    function safeAdd (x, y) {
        var lsw = (x & 0xFFFF) + (y & 0xFFFF)
        var msw = (x >> 16) + (y >> 16) + (lsw >> 16)
        return (msw << 16) | (lsw & 0xFFFF)
    }

    /*
     * Bitwise rotate a 32-bit number to the left.
     */
    function bitRotateLeft (num, cnt) {
        return (num << cnt) | (num >>> (32 - cnt))
    }

    /*
     * These functions implement the four basic operations the algorithm uses.
     */
    function md5cmn (q, a, b, x, s, t) {
        return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b)
    }
    function md5ff (a, b, c, d, x, s, t) {
        return md5cmn((b & c) | ((~b) & d), a, b, x, s, t)
    }
    function md5gg (a, b, c, d, x, s, t) {
        return md5cmn((b & d) | (c & (~d)), a, b, x, s, t)
    }
    function md5hh (a, b, c, d, x, s, t) {
        return md5cmn(b ^ c ^ d, a, b, x, s, t)
    }
    function md5ii (a, b, c, d, x, s, t) {
        return md5cmn(c ^ (b | (~d)), a, b, x, s, t)
    }

    /*
     * Calculate the MD5 of an array of little-endian words, and a bit length.
     */
    function binlMD5 (x, len) {
        /* append padding */
        x[len >> 5] |= 0x80 << (len % 32)
        x[(((len + 64) >>> 9) << 4) + 14] = len

        var i
        var olda
        var oldb
        var oldc
        var oldd
        var a = 1732584193
        var b = -271733879
        var c = -1732584194
        var d = 271733878

        for (i = 0; i < x.length; i += 16) {
            olda = a
            oldb = b
            oldc = c
            oldd = d

            a = md5ff(a, b, c, d, x[i], 7, -680876936)
            d = md5ff(d, a, b, c, x[i + 1], 12, -389564586)
            c = md5ff(c, d, a, b, x[i + 2], 17, 606105819)
            b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330)
            a = md5ff(a, b, c, d, x[i + 4], 7, -176418897)
            d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426)
            c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341)
            b = md5ff(b, c, d, a, x[i + 7], 22, -45705983)
            a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416)
            d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417)
            c = md5ff(c, d, a, b, x[i + 10], 17, -42063)
            b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162)
            a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682)
            d = md5ff(d, a, b, c, x[i + 13], 12, -40341101)
            c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290)
            b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329)

            a = md5gg(a, b, c, d, x[i + 1], 5, -165796510)
            d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632)
            c = md5gg(c, d, a, b, x[i + 11], 14, 643717713)
            b = md5gg(b, c, d, a, x[i], 20, -373897302)
            a = md5gg(a, b, c, d, x[i + 5], 5, -701558691)
            d = md5gg(d, a, b, c, x[i + 10], 9, 38016083)
            c = md5gg(c, d, a, b, x[i + 15], 14, -660478335)
            b = md5gg(b, c, d, a, x[i + 4], 20, -405537848)
            a = md5gg(a, b, c, d, x[i + 9], 5, 568446438)
            d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690)
            c = md5gg(c, d, a, b, x[i + 3], 14, -187363961)
            b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501)
            a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467)
            d = md5gg(d, a, b, c, x[i + 2], 9, -51403784)
            c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473)
            b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734)

            a = md5hh(a, b, c, d, x[i + 5], 4, -378558)
            d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463)
            c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562)
            b = md5hh(b, c, d, a, x[i + 14], 23, -35309556)
            a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060)
            d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353)
            c = md5hh(c, d, a, b, x[i + 7], 16, -155497632)
            b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640)
            a = md5hh(a, b, c, d, x[i + 13], 4, 681279174)
            d = md5hh(d, a, b, c, x[i], 11, -358537222)
            c = md5hh(c, d, a, b, x[i + 3], 16, -722521979)
            b = md5hh(b, c, d, a, x[i + 6], 23, 76029189)
            a = md5hh(a, b, c, d, x[i + 9], 4, -640364487)
            d = md5hh(d, a, b, c, x[i + 12], 11, -421815835)
            c = md5hh(c, d, a, b, x[i + 15], 16, 530742520)
            b = md5hh(b, c, d, a, x[i + 2], 23, -995338651)

            a = md5ii(a, b, c, d, x[i], 6, -198630844)
            d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415)
            c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905)
            b = md5ii(b, c, d, a, x[i + 5], 21, -57434055)
            a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571)
            d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606)
            c = md5ii(c, d, a, b, x[i + 10], 15, -1051523)
            b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799)
            a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359)
            d = md5ii(d, a, b, c, x[i + 15], 10, -30611744)
            c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380)
            b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649)
            a = md5ii(a, b, c, d, x[i + 4], 6, -145523070)
            d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379)
            c = md5ii(c, d, a, b, x[i + 2], 15, 718787259)
            b = md5ii(b, c, d, a, x[i + 9], 21, -343485551)

            a = safeAdd(a, olda)
            b = safeAdd(b, oldb)
            c = safeAdd(c, oldc)
            d = safeAdd(d, oldd)
        }
        return [a, b, c, d]
    }

    /*
     * Convert an array of little-endian words to a string
     */
    function binl2rstr (input) {
        var i
        var output = ''
        var length32 = input.length * 32
        for (i = 0; i < length32; i += 8) {
            output += String.fromCharCode((input[i >> 5] >>> (i % 32)) & 0xFF)
        }
        return output
    }

    /*
     * Convert a raw string to an array of little-endian words
     * Characters >255 have their high-byte silently ignored.
     */
    function rstr2binl (input) {
        var i
        var output = []
        output[(input.length >> 2) - 1] = undefined
        for (i = 0; i < output.length; i += 1) {
            output[i] = 0
        }
        var length8 = input.length * 8
        for (i = 0; i < length8; i += 8) {
            output[i >> 5] |= (input.charCodeAt(i / 8) & 0xFF) << (i % 32)
        }
        return output
    }

    /*
     * Calculate the MD5 of a raw string
     */
    function rstrMD5 (s) {
        return binl2rstr(binlMD5(rstr2binl(s), s.length * 8))
    }

    /*
     * Calculate the HMAC-MD5, of a key and some data (raw strings)
     */
    function rstrHMACMD5 (key, data) {
        var i
        var bkey = rstr2binl(key)
        var ipad = []
        var opad = []
        var hash
        ipad[15] = opad[15] = undefined
        if (bkey.length > 16) {
            bkey = binlMD5(bkey, key.length * 8)
        }
        for (i = 0; i < 16; i += 1) {
            ipad[i] = bkey[i] ^ 0x36363636
            opad[i] = bkey[i] ^ 0x5C5C5C5C
        }
        hash = binlMD5(ipad.concat(rstr2binl(data)), 512 + data.length * 8)
        return binl2rstr(binlMD5(opad.concat(hash), 512 + 128))
    }

    /*
     * Convert a raw string to a hex string
     */
    function rstr2hex (input) {
        var hexTab = '0123456789abcdef'
        var output = ''
        var x
        var i
        for (i = 0; i < input.length; i += 1) {
            x = input.charCodeAt(i)
            output += hexTab.charAt((x >>> 4) & 0x0F) +
                hexTab.charAt(x & 0x0F)
        }
        return output
    }

    /*
     * Encode a string as utf-8
     */
    function str2rstrUTF8 (input) {
        return unescape(encodeURIComponent(input))
    }

    /*
     * Take string arguments and return either raw or hex encoded strings
     */
    function rawMD5 (s) {
        return rstrMD5(str2rstrUTF8(s))
    }
    function hexMD5 (s) {
        return rstr2hex(rawMD5(s))
    }
    function rawHMACMD5 (k, d) {
        return rstrHMACMD5(str2rstrUTF8(k), str2rstrUTF8(d))
    }
    function hexHMACMD5 (k, d) {
        return rstr2hex(rawHMACMD5(k, d))
    }

    function md5 (string, key, raw) {
        if (!key) {
            if (!raw) {
                return hexMD5(string)
            }
            return rawMD5(string)
        }
        if (!raw) {
            return hexHMACMD5(key, string)
        }
        return rawHMACMD5(key, string)
    }

    if (typeof define === 'function' && define.amd) {
        define(function () {
            return md5
        })
    } else if (typeof module === 'object' && module.exports) {
        module.exports = md5
    } else {
        $.md5 = md5
    }
}(this))

function hashCode(str){
    var hash = 0;
    str = md5(str);
    if (str.length == 0) return hash;
    var hashLeft = 5;
    for (i = 0; i < str.length; i++) {
        char = str.charCodeAt(i);
        hash = ((hash<<hashLeft)-hash)+char;
        hash = hash & hash; // Convert to 32bit integer
    }
    return hash;
}


function createColor(text) {
    var hash = hashCode(text);
    var r = (hash & 0xFF0000) >> 16;
    var g = (hash & 0x00FF00) >> 8;
    var b = hash & 0x0000FF;
    return 'rgb('+r+','+g+','+b+')';
}

class MalwareWindow {
    constructor(level=1,windowName,parentWindow=0) {
        this.level = level;
        if (level==1)
            {
            $('body').append('<main class="MalWindow"></main>');
            this.parentDiv = $('main').get(0);
            }
            else
            {
            var divhtml = '<div class="MalWindow passive"></div>';
            var div = document.createElement('div');
            div.innerHTML = divhtml;
            div = div.childNodes[0];
            $('body').append(div);
            this.parentDiv = div;
            }
        this.objs = new Array();
        this.parentWindow = parentWindow;
        this.windowName = windowName;
        this.container = 0;
    }

    constructContainer() {
        var divhtml = '<div class="container container-'+this.objs.length+'"></div>';
        var div = document.createElement('div');
        div.innerHTML = divhtml;
        div = div.childNodes[0];
        this.container = div;
        $(this.parentDiv).append(div);
        this.pointCollection = new windowPointCollection(this);
        for (var i=0; i<this.objs.length; i++)
            {
            $(div).append(this.objs[i].obj);
            for (var j=0; j<this.objs[i].connections.length; j++)
                {
                $(this.parentDiv).append(this.objs[i].connections[j].obj);
                var pointToPlace = this.findClosestAvailablePoint(this.objs[i].obj);
                pointToPlace.available = 0;
                this.objs[i].connections[j].placeAt(pointToPlace);
                }
            }

        this.constructTopLeftDescriptor();
    }

    constructTopLeftDescriptor() {
        var divhtml = '<div class="topLeftDescriptor"></div><div class="descriptorConnection"></div>';
        var div = document.createElement('div');
        div.innerHTML = divhtml;
        var div2 = div.childNodes[1];
        div = div.childNodes[0];

        $(div).append('<span style="background: '+createColor(this.windowName)+';">'+this.windowName+'</span>');
        if (this.level>1)
            $(div).prepend('<span style="background: '+createColor(this.parentWindow.windowName)+';">'+this.parentWindow.windowName+'</span>');
        if (this.level>2)
            $(div).prepend('<span style="background: '+createColor(this.parentWindow.parentWindow.windowName)+';">'+this.parentWindow.parentWindow.windowName+'</span>');
        if (this.level>3)
            $(div).prepend('<span style="background: '+createColor(this.parentWindow.parentWindow.parentWindow.windowName)+';">'+this.parentWindow.parentWindow.parentWindow.windowName+'</span>');
        $(this.parentDiv).append(div);
        if (this.level>1)
            {
            $(div).click($.proxy(this.parentWindow.expandBack, this.parentWindow));
            $(div).click($.proxy(this.shrinkBack, this));
            }
        $(this.parentDiv).append(div2);
    }

    addObjects(objArray) {
        for (var i=0; i<objArray.length; i++)
            this.addObject(objArray[i]);
    }

    addObject(obj) {
        this.objs.push(obj);
        obj.parentWindow = this;
    }

    findClosestAvailablePoint(obj) {
        var objCenterX = $(obj).offset().left + $(obj).width()/2;
        var objCentery = $(obj).offset().top + $(obj).height()/2;
        var minDist = 9999;
        var minIndex = -1;
        for (var i=0; i<this.pointCollection.points.length; i++)
            if (this.distanceBetweenPoints(this.pointCollection.points[i].x,this.pointCollection.points[i].y,objCenterX,objCentery)<minDist && this.pointCollection.points[i].available==1)
                {
                minDist = this.distanceBetweenPoints(this.pointCollection.points[i].x,this.pointCollection.points[i].y,objCenterX,objCentery);
                minIndex = i;
                }
        if (minIndex>=0)
            {
            //this.pointCollection.points[minIndex].makeRed();
            //this.pointCollection.points[minIndex].available = 0;
            return this.pointCollection.points[minIndex];
            }
    }

    distanceBetweenPoints(x1,y1,x2,y2) {
        return Math.sqrt( (x2-x1)*(x2-x1) + (y2-y1)*(y2-y1)  );
    }

    expand(){
        $(this.parentDiv).removeClass('cornerShrinkAnimation');
        $(this.parentDiv).removeClass('centerShrinkAnimation');
        $(this.parentDiv).css('display','block');
        $(this.parentDiv).css('visibility','hidden');
        if (this.container==0)
            this.constructContainer();
        $(this.parentDiv).css('visibility','visible');
        $(this.parentDiv).addClass('centerExpandAnimation');

        this.parentWindow.shrink();
    }


    expandBack(){
        $(this.parentDiv).removeClass('cornerShrinkAnimation');
        $(this.parentDiv).css('display','block');
        $(this.parentDiv).css('visibility','visible');
        $(this.parentDiv).addClass('cornerExpandAnimation');
    }

    shrink() {
        $(this.parentDiv).addClass('cornerShrinkAnimation');
    }


    shrinkBack() {
        $(this.parentDiv).addClass('centerShrinkAnimation');
    }
}

class ConnectionLine {
    constructor(InfoObject,Connection,color) {
        var correctwidth = $(Connection.obj).width() + parseInt($(Connection.obj).css('padding-left'))*2;
        var correctheight = $(Connection.obj).height() + parseInt($(Connection.obj).css('padding-top'))*2;
        this.connectionCenterX = $(Connection.obj).offset().left+correctwidth/2;
        this.connectionCenterY = $(Connection.obj).offset().top+correctheight/2;
        this.infoCenterX = $(InfoObject.obj).offset().left+$(InfoObject.obj).width()/2;
        this.infoCenterY = $(InfoObject.obj).offset().top+$(InfoObject.obj).height()/2;
        this.color = color;
        this.obj = this.createLine(InfoObject.parentWindow.parentDiv, this.connectionCenterX, this.connectionCenterY, this.infoCenterX, this.infoCenterY);
    }

    createLine(parrentWindow, x1,y1, x2,y2){



        var length = Math.sqrt((x1-x2)*(x1-x2) + (y1-y2)*(y1-y2));
        var angle  = Math.atan2(y2 - y1, x2 - x1) * 180 / Math.PI;
        var transform = 'rotate('+angle+'deg)';

        var line = $('<div>')
            .appendTo(parrentWindow)
            .addClass('connectionLine')
            .css({
                'position': 'absolute',
                'transform': transform,
                'background': this.color
            })
            .width(length);
        if (y2<y1)
            {
            if (x1<x2)
                $(line).offset({left: x1, top: y2});
                else
                $(line).offset({left: x2, top: y2});
            }
            else
            {
            if (x1<x2)
                $(line).offset({left: x1, top: y1});
                else
                $(line).offset({left: x2, top: y1});
            }

        return line;
    }
}

class InfoObject {
    constructor(text,apilink) {
        this.text = text;
        this.apilink = apilink;
        this.color = createColor(text);
        this.obj = this.createObj();
        this.parentWindow = 0;
        this.connections = new Array();
    }

    createObj() {
        var divhtml = '<div class="info_obj" style="background-color: '+this.color+';"><span>'+this.text+'</span></div>';
        var div = document.createElement('div');
        div.innerHTML = divhtml;
        div = div.childNodes[0];
        return div;
    }


    addConnection(text,apilink) {
        this.connections.push( new Connection(text,apilink,this) );
    }

    addSubWindow(SubWindow) {
        this.subWindow = SubWindow;
        //$(this.obj).click(this.subWindow.expand);
        $(this.obj).click($.proxy(this.subWindow.expand,this.subWindow));
    }
}

class Connection {
    constructor(text,apilink,parent) {
        this.text = text;
        this.apilink = apilink;
        this.parentInfoObject = parent;
        this.obj = this.createObj();
    }

    createObj() {
        var divhtml = '<div class="connection" style="border-color: '+this.parentInfoObject.color+';">'+this.text+'</div>';
        var div = document.createElement('div');
        div.innerHTML = divhtml;
        div = div.childNodes[0];
        return div;
    }

    placeAt(point) {
        var correctwidth = $(this.obj).width() + parseInt($(this.obj).css('padding-left'))*2;
        var correctheight = $(this.obj).height() + parseInt($(this.obj).css('padding-top'))*2;
        var l = point.x-correctwidth/2;
        var t = point.y-correctheight/2;
        $(this.obj).css('left',l+'px');
        $(this.obj).css('top',t+'px');
        this.connectionLine = new ConnectionLine(this.parentInfoObject, this, this.parentInfoObject.color);
    }
}

class windowPointCollection {
    constructor(window) {
        this.windowObj = window;
        this.points = this.generatePoints();
    }

    generatePoints() {
        var l = $(this.windowObj.container).offset().left;
        var t = $(this.windowObj.container).offset().top;
        var w = $(this.windowObj.container).width();
        var h = $(this.windowObj.container).height();

        var nrPointsW = 6;
        var nrPointsH = 3;
        var widthSpace = PercentW(12);
        var heightSpace = PercentH(20);


        var points = new Array();
        //generate top line points  X1,Y1 -> X2,Y2
        var lineX1 = l-widthSpace;
        var lineY1 = t-heightSpace;
        var lineX2 = l+w+widthSpace;
        var lineY2 = t-heightSpace;
        var spaceBetween = (lineX2-lineX1)/nrPointsW;
        var px = lineX1;
        var py = lineY1;
        points.push( new WindowPoint(px,py) );
        for (var i=0; i<nrPointsW; i++)
            {
            px = px+spaceBetween;
            points.push( new WindowPoint(px,py) );
            }

        //generate right line points
        lineX1 = l+w+widthSpace;
        lineY1 = t-heightSpace;
        lineX2 = l+w+widthSpace;
        lineY2 = t+h+heightSpace;
        spaceBetween = (lineY2-lineY1)/nrPointsH;
        px = lineX1;
        py = lineY1+spaceBetween;
        points.push( new WindowPoint(px,py) );
        for (var i=1; i<nrPointsH; i++)
            {
            py = py+spaceBetween;
            points.push( new WindowPoint(px,py) );
            }

        //generate bottom line points
        lineX1 = l+w+widthSpace;
        lineY1 = t+h+heightSpace;
        lineX2 = l-widthSpace;
        lineY2 = t+h+heightSpace;
        spaceBetween = (lineX1-lineX2)/nrPointsW;
        px = lineX1-spaceBetween;
        py = lineY1;
        points.push( new WindowPoint(px,py) );
        for (var i=1; i<nrPointsW; i++)
            {
            px = px-spaceBetween;
            points.push( new WindowPoint(px,py) );
            }

        //generate left line points
        lineX1 = l-widthSpace;
        lineY1 = t+h+heightSpace;
        lineX2 = l-widthSpace;
        lineY2 = t-heightSpace;
        spaceBetween = (lineY1-lineY2)/nrPointsH;
        px = lineX1;
        py = lineY1-spaceBetween;
        points.push( new WindowPoint(px,py) );
        for (var i=2; i<nrPointsH; i++)
            {
            py = py-spaceBetween;
            points.push( new WindowPoint(px,py) );
            }
        return points;
    }

    showPoints() {
        for (var i=0; i<this.points.length; i++)
            {
            $(this.windowObj.parentDiv).append(this.points[i].div);
            }
    }
}

class WindowPoint {
    constructor(x,y) {
        this.x = x;
        this.y = y;
        this.available = 1;
        this.div = this.constructDiv();
    }

    constructDiv() {
        var divhtml = '<div class="point" style="left: '+this.x+'px; top: '+this.y+'px;"></div>';
        var div = document.createElement('div');
        div.innerHTML = divhtml;
        div = div.childNodes[0];
        return div;
    }

    makeRed() {
        $(this.div).css('background','red');
    }
}


function constructFirstWindow(data) {
    $('.form_window').hide();
    var  MalWindow1 = new MalwareWindow(1,data.hash);
    var objs = [];
    for (var i=0; i<data.categories.length; i++)
        {
        objs.push(new InfoObject(data.categories[i].name, data.categories[i].name));
        if (data.categories[i].minpercent>0)
            objs[i].addConnection(parseInt(data.categories[i].minpercent)+'%','');
        if (i==0)
            prepareSecondaryWindows(data.categories[i],data.hash);
        }


    MalWindow1.addObjects(objs);
    MalWindow1.constructContainer();



}

function prepareSecondaryWindows(categ,hash) {
    $.get('http://46.101.240.170/v1/sim/'+hash+'/'+'1'+'/'+categ.name, function(data) {
        data = JSON.parse(data);
        console.log(data);
        //constructFirstWindow(data);
    });
}