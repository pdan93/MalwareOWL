"""Insert instance into owl file.

This program will insert a file instance
and its properties into an owl file.
"""
import sys
import os
import json
import xmltodict
import collections
import shutil

"""
Globals
"""

base_url = "http://www.semanticweb.org/acitea/ontologies/2017/0/malware-ontology#"
base_url_format = "http://www.semanticweb.org/acitea/ontologies/2017/0/malware-ontology#{0}"
ontology_prepend = "malware-ontology"
ontology_prepend_format = "malware-ontology:{0}"
base_tag = "rdf:RDF"
owl_class = "owl:Class"
owl_datatype = "owl:DatatypeProperty"
owl_instance = "owl:NamedIndividual"
owl_objectprop = "owl:ObjectProperty"

rdf_about_tag = "@rdf:about"
rdf_resource_tag = "@rdf:resource"
rdf_type = "rdf:type"
rdf_datatype = "@rdf:datatype"

rdfs_subclass_tag = "rdfs:subClassOf"
rdfs_domain_tag = "rdfs:domain"
rdfs_range_tag = "rdfs:range"
rdfs_subproperty_tag = "rdfs:subPropertyOf"

"""
================================================================
                        Helpers
================================================================
"""


def get_entity(name):
    """Return an entity complete name."""
    if name.lower() == "thing":
        return "http://www.w3.org/2002/07/owl#Thing"
    else:
        return base_url_format.format(name)


def get_type(name):
    """Return the full URI to a datatype."""
    return "http://www.w3.org/2001/XMLSchema#{0}".format(name)


def get_md5_from_json(data):
    """Try to retrieve the MD5 from the json data."""
    sequence = ["additional-info", "File identification", "MD5", "value"]
    crt = data
    for s in sequence:
        if type(crt) == dict:
            if s in crt:
                crt = crt[s]
            else:
                print crt
                return None
        else:
            print crt
            return None

    return crt


def strip_string(mystr):
    """Standardize a string."""
    mystr = mystr.strip().replace(" ", "_")
    mystr = mystr.replace("\n", "")
    mystr = mystr.replace("\t", "")
    mystr = mystr.replace(")", "")
    mystr = mystr.replace("(", "")
    mystr = mystr.replace("[", "")
    mystr = mystr.replace("]", "")
    mystr = mystr.replace("+", "")
    mystr = mystr.replace("!", "")
    mystr = mystr.replace("#", "")
    mystr = mystr.replace("%", "")
    mystr = mystr.replace("&", "")
    mystr = mystr.replace("*", "")
    mystr = mystr.lower()

    return mystr


def parse_args():
    """Parse the arguments. Get the paths."""
    if len(sys.argv) < 3:
        raise RuntimeError("Invalid number of arguments")

    path_to_rdf = sys.argv[1]
    path_to_json = sys.argv[2]
    path_to_result = sys.argv[3]

    return (path_to_rdf, path_to_json, path_to_result)


def load_xml_rdf(rdf_path):
    """Load the RDF/XML file into memory."""
    if not os.path.exists(rdf_path):
        raise RuntimeError("Invalid path to rdf file.")
    root = None
    with open(rdf_path, "r") as fp:
        root = xmltodict.parse(fp.read())

    return root


def load_json(json_path):
    """Load the JSON file into memory."""
    if not os.path.exists(json_path):
        raise RuntimeError("Invalid path to json file")
    data = None
    with open(json_path, "r") as fp:
        data = json.load(fp)

    if get_md5_from_json(data) is not None:
        return data
    else:
        raise RuntimeError("Invalid JSON data")
"""
================================================================
                        Procesors
================================================================
"""

"""
Generic
"""


def rdfxml_node_append(node, key, value):
    """Add a value to a node based on key."""
    if key in node:
        if type(node[key]) == list:
            node[key].append(value)
        else:
            temp = [node[key], value]
            node[key] = temp
    else:
        node[key] = value


def rdfxml_node_add_subresource(node, resource, key):
    """Add another subclass to a node."""
    subnode = collections.OrderedDict()
    subnode[rdf_resource_tag] = get_entity(resource)

    rdfxml_node_append(node, key, subnode)


def rdfxml_resource_exists(rdfxml, name, type):
    """Search for a classname."""
    name = name.encode('utf-8')
    for item in rdfxml[base_tag][owl_class]:
        for field in item:
            if field == rdf_about_tag:
                if item[field].endswith(name):
                    return True
    return False


def rdfxml_class_exists(rdfxml, name):
    """Search for a classname."""
    return rdfxml_resource_exists(rdfxml, name, owl_class)


def rdfxml_instance_exists(rdfxml, name):
    """Search for a instance."""
    return rdfxml_resource_exists(rdfxml, name, owl_instance)


def rdfxml_datatype_exists(rdfxml, name):
    """Search for a datatype."""
    return rdfxml_resource_exists(rdfxml, name, owl_datatype)


def rdfxml_objectprop_exists(rdfxml, name):
    """Search for a object property."""
    return rdfxml_resource_exists(rdfxml, name, owl_objectprop)


"""
Specific
"""


def rdfxml_add_class(rdfxml, name, subclasses_of=["Thing"]):
    """Add a new class to the RDF/XML dict."""
    node = collections.OrderedDict()
    name = name.encode('utf-8')
    node[rdf_about_tag] = base_url_format.format(name)
    for subcls in subclasses_of:
        rdfxml_node_add_subresource(node, subcls, rdfs_subclass_tag)

    rdfxml_node_append(rdfxml[base_tag], owl_class, node)


def rdfxml_add_datatype(rdfxml, name, domains=[], ranges=[], subpropertys=[]):
    """Add a new datatype to the RDF/XML dict."""
    node = collections.OrderedDict()
    name = name.encode('utf-8')
    node[rdf_about_tag] = base_url_format.format(name)

    for d in domains:
        rdfxml_node_add_subresource(node, d, rdfs_domain_tag)
    for r in ranges:
        rdfxml_node_add_subresource(node, r, rdfs_range_tag)
    for s in subpropertys:
        rdfxml_node_add_subresource(node, s, rdfs_subproperty_tag)

    rdfxml_node_append(rdfxml[base_tag], owl_datatype, node)


def rdfxml_add_objectprop(rdfxml, name, domains=[], ranges=[], subpropertys=[]):
    """Add a new datatype to the RDF/XML dict."""
    node = collections.OrderedDict()
    name = name.encode('utf-8')
    node[rdf_about_tag] = base_url_format.format(name)

    for d in domains:
        rdfxml_node_add_subresource(node, d, rdfs_domain_tag)
    for r in ranges:
        rdfxml_node_add_subresource(node, r, rdfs_range_tag)
    for s in subpropertys:
        rdfxml_node_add_subresource(node, s, rdfs_subproperty_tag)

    rdfxml_node_append(rdfxml[base_tag], owl_objectprop, node)


def rdfxml_instance_add_data_property(node, name, prop_type, value):
    """Add a property to an instance of a class."""
    subnode = collections.OrderedDict()
    subnode[rdf_datatype] = get_type(prop_type)
    subnode["#text"] = str(value)

    key = ontology_prepend_format.format(name)
    rdfxml_node_append(node, key, subnode)


def rdfxml_add_instance(rdfxml, name, inst_type, properties=[]):
    """Add an instance of a class to the RDF/XML dict."""
    node = collections.OrderedDict()
    name = name.encode('utf-8')
    try:
        node[rdf_about_tag] = base_url_format.format(name)

        rdfxml_node_add_subresource(node, inst_type, rdf_type)
        for prop in properties:
            prop_type = prop[0]
            prop_name = prop[1]
            prop_value = prop[2]
            if prop_type != "object":
                rdfxml_instance_add_data_property(node, prop_name, prop_type, prop_value)
            else:
                prop_name = ontology_prepend_format.format(prop_name)
                rdfxml_node_add_subresource(node, prop_value, prop_name)

        rdfxml_node_append(rdfxml[base_tag], owl_instance, node)
    except Exception, e:
        print "ERROR: {0}".format(name.encode('utf-8'))

"""
Main logic
"""


def recursively_map_properties(rdfxml, data, parent="Thing"):
    """Recursively map the data reveived in the JSON file."""
    properties = []

    for item in data:
        old_item = item
        item = strip_string(item)
        parent = strip_string(parent)

        if type(data[old_item]) != dict:
            raise RuntimeError("Invalid data on deep layer.")

        if "type" not in data[old_item]:
            if not rdfxml_class_exists(rdfxml, item):
                rdfxml_add_class(rdfxml, item, [parent])

            properties += recursively_map_properties(rdfxml, data[old_item], item)
            continue

        # Create the parent classes
        if not rdfxml_class_exists(rdfxml, item):
            rdfxml_add_class(rdfxml, item, [parent])

        property_name = "has_{0}_{1}".format(parent, item)

        # Create the object properties from "File" to Item.
        if not type(data[old_item]["value"]) == dict:
            if not rdfxml_objectprop_exists(rdfxml, property_name):
                rdfxml_add_objectprop(
                    rdfxml,
                    property_name,
                    ["File"],
                    [item])

        # Create the instances
        if data[old_item]["type"] == "array":
            if type(data[old_item]["value"]) == list:
                for indice in range(len(data[old_item]["value"])):
                    value = strip_string(data[old_item]["value"][indice])
                    properties.append(("object", property_name, value))

                    if not rdfxml_instance_exists(rdfxml, value):
                        rdfxml_add_instance(rdfxml, value, item)
            elif type(data[old_item]["value"]) == dict:
                for key in data[old_item]["value"]:
                    property_name = "has_{0}_{1}_{2}".format(parent, item, strip_string(key))

                    if not rdfxml_objectprop_exists(rdfxml, property_name):
                        rdfxml_add_objectprop(
                            rdfxml,
                            property_name,
                            ["File"],
                            [item])

                    value = strip_string(data[old_item]["value"][key])
                    properties.append(("object", property_name, value))

                    if not rdfxml_instance_exists(rdfxml, value):
                        rdfxml_add_instance(rdfxml, value, item)
        else:
            value = strip_string(data[old_item]["value"])
            properties.append(("object", property_name, value))

            if not rdfxml_instance_exists(rdfxml, value):
                rdfxml_add_instance(rdfxml, value, item)

    return properties


def add_data(rdfxml, data):
    """Add the data about the instance to the rdf/xml dictionary."""
    if not rdfxml_instance_exists(rdfxml, get_md5_from_json(data)):
        properties_to_add = recursively_map_properties(rdfxml, data)

        rdfxml_add_instance(
            rdfxml,
            get_md5_from_json(data),
            "File",
            properties_to_add)


def process(paths):
    """Process the received instance."""
    rdfxml = load_xml_rdf(paths[0])
    data = load_json(paths[1])

    add_data(rdfxml, data)

    with open(paths[2], "w") as fp:
        fp.write(xmltodict.unparse(rdfxml, pretty=True))
    shutil.move(paths[2], paths[0])

"""
================================================================
                            STARTUP
================================================================
"""


def main():
    """Main logic."""
    paths = parse_args()
    process(paths)


if __name__ == "__main__":
    main()
