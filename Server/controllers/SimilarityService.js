'use strict';

exports.multisymHashGET = function(args, res, next) {
  /**
   * Hash multivalue similarity endpoint
   * Retrives the similar entities which related to the current target via multiple specified values.
   *
   * hash String The target hash.
   * sequences Sequences The level sequence.
   * returns Similarityresult
   **/
  var examples = {};
  examples['application/json'] = {
  "hash_array" : [ {
    "url" : "aeiou",
    "procentage" : 123
  } ]
};
  if (Object.keys(examples).length > 0) {
    res.setHeader('Content-Type', 'application/json');
    res.end(JSON.stringify(examples[Object.keys(examples)[0]] || {}, null, 2));
  } else {
    res.end();
  }
}

exports.simHashProcentageSequenceGET = function(args, res, next) {
  /**
   * Similarity endpoint
   * Computes various similarity properties for a hash and a certain property level.
   *
   * hash String The target hash.
   * procentage Integer The similarity procentage to be used in the query.
   * sequence String The level sequence.
   * returns Similarityresult
   **/
  var examples = {};
  examples['application/json'] = {
  "hash_array" : [ {
    "url" : "aeiou",
    "procentage" : 123
  } ]
};
  if (Object.keys(examples).length > 0) {
    res.setHeader('Content-Type', 'application/json');
    res.end(JSON.stringify(examples[Object.keys(examples)[0]] || {}, null, 2));
  } else {
    res.end();
  }
}

exports.valueSimValueSequenceGET = function(args, res, next) {
  /**
   * Value similarity endpoint
   * Retrives the entities related to the value.
   *
   * value String The target hash.
   * sequence String The level sequence.
   * returns ValueSymresult
   **/
  var examples = {};
  examples['application/json'] = {
  "entities" : [ "aeiou" ]
};
  if (Object.keys(examples).length > 0) {
    res.setHeader('Content-Type', 'application/json');
    res.end(JSON.stringify(examples[Object.keys(examples)[0]] || {}, null, 2));
  } else {
    res.end();
  }
}

