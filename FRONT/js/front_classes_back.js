/**
 * Created by Daniel on 1/30/2017.
 */


var windowSize = {width: $(window).width(), height: $(window).height()};
function PercentW(perc) {
    return windowSize.width*(perc/100);
}
function PercentH(perc) {
    return windowSize.height*(perc/100);
}

function ObjectIsInZones(O,zones) {
    for (var i=0; i<zones.length; i++)
    {
        if (ObjectIsInZone(O,zones[i]))
            return 1;
    }
    return 0;
}

function ObjectIsInZone(O,zone) {
    if (O.left>=zone.l && O.left+O.width<=zone.r && O.top>=zone.t && O.top+O.height<=zone.b)
        return 1;
    return 0;
}


class MalwareWindow {
    constructor(fabricCanvas,level=1) {
        this.level = level;
        this.canvas = fabricCanvas;
        this.parent;
        this.mainObject;
        this.objects = new Array();
        this.lines = new Array();
    }

    addAllToCanvas() {
        for (var i=0; i<this.objects.length; i++)
            this.canvas.add(this.objects[i].obj);
        if (typeof(this.mainObject)!='undefined')
            this.canvas.add(this.mainObject.obj);
        this.canvas.renderAll();
    }

    setMainObject(obj) {
        this.mainObject = new WindowMainObject(obj,'main');
    }

    addObjects(objArray) {
        for (var i=0; i<objArray.length; i++)
            this.addObject(objArray[i]);
    }

    addObject(obj) {
        this.objects.push( new WindowObject(obj) );
    }

    distributeObjects() {
        var angleBetween = 360/this.objects.length;
        var centerMain = {
            x: this.mainObject.obj.left+this.mainObject.obj.width/2,
            y: this.mainObject.obj.top+this.mainObject.obj.height/2
        };

        var startAngle = -90;
        var radius = 200;
        for (var i=0; i<this.objects.length; i++)
            {
            var radians = startAngle * (Math.PI/180);
            var x = centerMain.x + radius * Math.cos(radians);
            var y = centerMain.y + radius * Math.sin(radians);
            this.objects[i].centerOn(x,y);
            this.objects[i].obj.setCoords();
            startAngle+= angleBetween;
            }
        this.canvas.renderAll();
    }

    addLine(coords) {
        var line = new ObjectsLine(coords);
        this.lines.push(line);
        this.canvas.add(line.obj);
    }

    LineBetween(Main,Secondary) {
        var zoneUp = {l:Main.left,r:Main.left+Main.width,t:0,b:Main.top};
        var zoneLeft = {l:0,r:Main.left,t:Main.top,b:Main.top+Main.height};
        var zoneRight = {l:Main.left+Main.width,r:windowSize.width,t:Main.top,b:Main.top+Main.height};
        var zoneDown = {l:Main.left,r:Main.left+Main.width,t:Main.top+Main.height,b:windowSize.height};
        if (ObjectIsInZones(Secondary,[zoneUp,zoneDown,zoneLeft,zoneRight]))
        {
            if (ObjectIsInZone(Secondary,zoneLeft))
            {
                this.addLine([
                    Secondary.left+Secondary.width,
                    Secondary.top+(Secondary.height/2),
                    Main.left,
                    Secondary.top+(Secondary.height/2),
                ]);
            }
            if (ObjectIsInZone(Secondary,zoneRight))
            {
                this.addLine([
                    Secondary.left,
                    Secondary.top+(Secondary.height/2),
                    Main.left+Main.width,
                    Secondary.top+(Secondary.height/2),
                ]);
            }
            if (ObjectIsInZone(Secondary,zoneUp))
            {
                this.addLine([
                    Secondary.left+Secondary.width/2,
                    Secondary.top+Secondary.height,
                    Secondary.left+Secondary.width/2,
                    Main.top,
                ]);
            }
            if (ObjectIsInZone(Secondary,zoneDown))
            {
                this.addLine([
                    Secondary.left+Secondary.width/2,
                    Main.top+Main.height,
                    Secondary.left+Secondary.width/2,
                    Secondary.top
                ]);
            }
        }

        var zoneUpLeft = {l:0,r:Main.left+Main.width/2,t:0,b:Main.top+Main.height/2};
        var zoneUpRight = {l:Main.left+Main.width/2,r:windowSize.width,t:0,b:Main.top+Main.height/2};
        var zoneDownLeft = {l:0,r:Main.left+Main.width/2,t:Main.top+Main.height/2,b:windowSize.height};
        var zoneDownRight = {l:Main.left+Main.width/2,r:windowSize.width,t:Main.top+Main.height/2,b:windowSize.height};

        if (ObjectIsInZones(Secondary,[zoneUpLeft,zoneUpRight,zoneDownLeft,zoneDownRight]))
        {
            if (ObjectIsInZone(Secondary,zoneUpLeft))
            {
                this.addLine([
                    Secondary.left+Secondary.width,
                    Secondary.top+Secondary.height,
                    Main.left,
                    Main.top,
                ]);
            }
            if (ObjectIsInZone(Secondary,zoneUpRight))
            {
                this.addLine([
                    Secondary.left,
                    Secondary.top+Secondary.height,
                    Main.left+Main.width,
                    Main.top,
                ]);
            }
            if (ObjectIsInZone(Secondary,zoneDownLeft))
            {
                this.addLine([
                    Secondary.left+Secondary.width,
                    Secondary.top,
                    Main.left,
                    Main.top+Main.height,
                ]);
            }
            if (ObjectIsInZone(Secondary,zoneDownRight))
            {
                this.addLine([
                    Secondary.left,
                    Secondary.top,
                    Main.left+Main.width,
                    Main.top+Main.height,
                ]);
            }
        }
    }

    connectAll() {
        for (var i=0; i<this.objects.length; i++)
            this.LineBetween(this.mainObject.obj,this.objects[i].obj);
        this.canvas.renderAll();
    }

}

class ObjectsLine {
    constructor(coords) {
        if (typeof(coords)!='undefined') {
            this.obj = new fabric.Line(coords, {
                fill: 'black',
                stroke: 'black',
                strokeWidth: 3,
                selectable: false
            });
        }
    }
}

class WindowObject {
    constructor(text,type='secondary') {
        this.type = type;
        this.text = text;
        this.obj = this.constructObject();
    }

    constructObject() {
        var text = new fabric.Text(this.text, {
            fontSize: 20,
            originX: 'center',
            originY: 'center',
        });

        var rect = new fabric.Rect({
            stroke: 'black',
            fill: 'white',
            originX: 'center',
            originY: 'center',
            width: text.getWidth()+10,
            height: text.getHeight()+10,
        });

        var groupRect = new fabric.Group([rect,text], {
            originX: 'left',
            originY: 'top',
            left: PercentW(20)-rect.width/2,
            top: PercentH(20)-rect.height/2
        });

        groupRect.set('selectable', false);
        return groupRect;
    }

    centerOn(x,y) {
        this.obj.setLeft(x-this.obj.width/2);
        this.obj.setTop(y-this.obj.height/2);
    }
}

class WindowMainObject extends WindowObject {
    constructObject() {
        var text = new fabric.Text(this.text, {
            fontSize: 30,
            originX: 'center',
            originY: 'center',
        });

        var rect = new fabric.Rect({
            stroke: 'black',
            fill: 'white',
            originX: 'center',
            originY: 'center',
            width: text.getWidth()+30,
            height: text.getHeight()+30,
        });

        var groupRect = new fabric.Group([rect,text], {
            originX: 'left',
            originY: 'top',
            left: PercentW(50)-rect.width/2,
            top: PercentH(50)-rect.height/2
        });

        groupRect.set('selectable', false);
        return groupRect;
    }
}



