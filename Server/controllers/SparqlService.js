'use strict';
var http = require('http')

exports.sparqlGET = function(args, res, next) {
  /**
   * Sparql endpoint
   * The sparql endpoint offers the possibility to interogate our knowledge graf based on Sparql queries. 
   *
   * query String Sparql query to process
   * returns List
   **/
  var examples = {};
  
	/*request.post(
		'http://localhost:8890/sparql',
		{ json: { key: 'value' } },
		function (error, response, body) {
			if (!error && response.statusCode == 200) {
				console.log(body)
			}
		}
	);*/
	var sparqlCommand = args['query']['value'];
	sparqlCommand = 'PREFIX malowl:<http://www.semanticweb.org/acitea/ontologies/2017/0/malware-ontology#> SELECT * WHERE {?s malowl:file_size ?o}';
	sparqlCommand = encodeURIComponent(sparqlCommand);
	var sparql_ENDPOINT = 'http://46.101.240.170:8890/sparql?default-graph-uri=&query='+sparqlCommand+'&should-sponge=&format=application%2Fsparql-results%2Bjson&timeout=0&debug=on';
	
	http.get(
        sparql_ENDPOINT
    , function(response) {
        // Continuously update stream with data
        var body = '';
        response.on('data', function(d) {
            body += d;
        });
        response.on('end', function() {

            // Data reception is done, do whatever with it!
            var parsed = JSON.parse(body);
            console.log(parsed);
			
			examples['application/json'] = [ {
			  "result" : parsed,
			  "timestamp" : new Date().getTime()
			} ];
			
			res.setHeader('Content-Type', 'application/json');
			res.end(JSON.stringify(examples[Object.keys(examples)[0]] || {}, null, 2));
        });
    });
  
	

  /*
  if (Object.keys(examples).length > 0) {
    res.setHeader('Content-Type', 'application/json');
    res.end(JSON.stringify(examples[Object.keys(examples)[0]] || {}, null, 2));
  } else {
    res.end();
  }*/
}

